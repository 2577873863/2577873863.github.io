{"version":3,"sources":["webpack:///./src/views/Detail/Detail.vue?0cab","webpack:///./src/views/Detail/Detail.vue?874c","webpack:///./public/config/detail/electron_note.js","webpack:///./public/config/detail.js","webpack:///src/views/Detail/Detail.vue","webpack:///./src/views/Detail/Detail.vue?95ca","webpack:///./src/views/Detail/Detail.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","mdText","staticRenderFns","details","electronNote","data","detailId","beforeMount","$route","params","id","replaceAll","component"],"mappings":"kHAAA,W,gECAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,aAAa,CAACF,EAAG,MAAM,CAACE,YAAY,iBAAiB,CAACF,EAAG,eAAe,CAACG,MAAM,CAAC,MAAQP,EAAIQ,OAAO,UAAW,EAAM,cAAe,EAAM,UAAW,EAAM,YAAc,UAAU,YAAa,MAAS,MAC1TC,EAAkB,GCDP,mppCCCFC,EAAU,CACrBC,EACA,ICaF,GACEC,KADF,WAEI,MAAO,CACLC,SAAU,EACVL,OAAQ,KAGZM,YAPF,WAQIb,KAAKY,SAAWZ,KAAKc,OAAOC,OAAOC,GAMnC,IAAJ,0CACIT,EAASA,EAAOU,WAAW,KAAM,KACjCV,EAASA,EAAOU,WAAW,KAAM,MACjCjB,KAAKO,OAASA,ICjC6U,I,wBCQ3VW,EAAY,eACd,EACApB,EACAU,GACA,EACA,KACA,WACA,MAIa,aAAAU,E","file":"js/chunk-61ecc344.2cdacdf2.js","sourcesContent":["export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Detail.vue?vue&type=style&index=0&id=7c6fa05d&lang=less&scoped=true&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"markdown-view\"},[_c('mavon-editor',{attrs:{\"value\":_vm.mdText,\"editable\":false,\"toolbarsFlag\":false,\"subfield\":false,\"defaultOpen\":\"preview\",\"navigation\":true}})],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default `\r\n## 1.Electron介绍\r\n* Electron 是由 Github开发的开源框架\r\n* 它允许开发者使用Web技术构建跨平台的桌面应用\r\n![electron的构成](http://newimg.jspang.com/web111111.jpg)\r\n* Electron = Chromium + Node.js + Native API\r\n  *  Chromium：为Electron提供了强大的UI能力，可以不考虑兼容性的情况下，使用强大的web生态来开发界面\r\n  *  Node.js：让Electron有了底层的操作能力，比如文件的读写，甚至是集成C++等等操作，并可以使用大量的开源=-npm=-包来完成开发\r\n  *  Native API：Native API让Electron有了跨平台和桌面端的原生能力，比如它具有用提的原生界面，窗口，托盘..\r\n  \r\n## 2.Electron开发环境的搭建\r\n0. 创建项目文件夹\r\n1. 使用=-npm=-初始化文件夹\r\n    -=\r\n    npm init -y\r\n    -=\r\n2. 安装Electron \r\n    -=\r\n    npm install electron --save-dev\r\n    -=\r\n3. 检查是否安装成功|检测版本 (两个命令都可以)\r\n    -=\r\n    npx electron -v \r\n    ./node_modules/.bin/electron -v (cnpm安装的此命令不行)  \r\n    -=\r\n    * 成功会出现版本号 例：  =-v8.0.0=- \r\n    * 失败会需要再次下载，可能需要翻墙或者换源 \r\n    * 失败提示:=-Electron failed to install correctly, please delete node_modules/electron and try installing again=-\r\n4. 运行electron示例\r\n    * 在=-package.json=-文件的=-scripts=-选项中添加\r\n    -=\r\n    \"dev\":\"./node_modules/.bin/electron\"\r\n    -=\r\n    * 在命令行执行  =-npm run dev=-\r\n    \r\n    * 运行结果\r\n        ![运行结果](http://newimg.jspang.com/ElectronDemo2.png)\r\n\r\n\r\n## 3.Electron的第一个例子\r\n1. 创建文件夹\r\n2. 使用=-npm=-初始文件夹\r\n    -=\r\n    npm init -y\r\n    npm init --yes\r\n    -=\r\n3. 安装Electron\r\n    -=\r\n    cnpm install electron --save-dev\r\n    -=\r\n4. 创建页面(index.html)，代码如下：\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>Electron案例1</title>\r\n    </head>\r\n    <body>\r\n      <h2>Hello World</h2>\r\n      <hr>\r\n      <h2>Hello Electron</h2>\r\n    </body>\r\n    </html>\r\n    -=\r\n5. 创建主进程(main.js)，代码如下：\r\n    -= js\r\n    const electron = require('electron');\r\n\r\n    const app = electron.app; //引用app\r\n    const BrowserWindow = electron.BrowserWindow; //引用窗口\r\n    \r\n    let mainWindow = null; //要打开的主窗口\r\n    \r\n    app.on('ready',()=>{\r\n      //https://www.electronjs.org/docs/api/browser-window\r\n      mainWindow = new BrowserWindow({ //创建窗口\r\n        width:300, //页面的宽度，单位px -默认800\r\n        height:300  //页面的高度，单位px -默认800\r\n      });\r\n      mainWindow.loadFile('index.html'); //加载html页面\r\n    \r\n      mainWindow.on('closed',()=>{ //关闭时清除窗口，不然会一直占用内存\r\n        mainWindow = null;\r\n      })\r\n    })\r\n    -=\r\n6. 修改=-package.json=-的=-scripts=-选项，如下：\r\n    -= js\r\n    \"scripts\": {\r\n        \"start\":\"electron .\"\r\n    },\r\n    -=\r\n7. 运行=-npm run start=-\r\n\r\n8. 运行结果\r\n\r\n    ![案例运行结果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGubNt7ix2ndDtAr0ZKs1SaSOCblK6dztFeXwYOGhq3D*2g3cUVxnWSIY*LysMpXp2Zb1HtT03CQEk3*tbwo6TXg!/r)\r\n\r\n\r\n\r\n## 4.Electron运行流程(附读取文件案例)\r\n* Electron分为**主进程**和**渲染进程**\r\n  * 一个Electron项目可以有**多个**渲染进程，但是只能**有且只有一个**主进程\r\n  * 主进程控制渲染进程，一个主进程可以控制多个渲染进程\r\n  ![渲染进程和主进程](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGmV66XGpPlWHOCcFH2*J7yeEQeiTnxV8bFsZH2vjQ.H7Ll*ML0bCYaEvP7YNMaMVcLMXxc*qnQA2uC.*vqlsGWk!/r)\r\n* Electron运行流程\r\n  ![运行流程图](http://newimg.jspang.com/electrondemo1.png)\r\n    1. Electron会读取=-package.json=-的=-main=-来决定谁是**主进程**\r\n        * 例如=-\"main\":\"main.js\"=-那么主进程就是=-main.js=-  *Electron会在 __主进程中找渲染进程__*\r\n    2.  =-main.js=-(主进程文件)中创建**渲染进程**(=-mainWindow.loadFile('index.html')=-) \r\n    3.  读取页面(渲染进程)的布局和样式(UI)\r\n    4.  使用IPC(进程见通信)在主进程执行任务并获取信息\r\n* 读取文件案例\r\n  * 文件目录\r\n    -= json\r\n    project\r\n    ├─node_modules\r\n    ├─data.txt\r\n    ├─index.html\r\n    ├─index.js\r\n    ├─package.json\r\n    ├─render\r\n    |   └render.js\r\n    -=\r\n  * data.txt文件内容\r\n    -=\r\n    我是文件 data.txt 的内容，点击按钮我就会出现（此内容无所谓，可修改）\r\n    -=\r\n  * index.html(渲染进程)文件内容\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>读取文件案例</title>\r\n    </head>\r\n    <body>\r\n      <button class=\"btn1\">点击读取文件</button>\r\n      <div class=\"container\"></div>\r\n      <!--引入js文件-->\r\n      <script src=\"render/render.js\"></script>\r\n    </body>\r\n    </html>\r\n    -=\r\n  * index.js(主进程)文件内容\r\n    -= js\r\n    const electron = require('electron');\r\n\r\n    const app = electron.app;\r\n    const BrowserWindow = electron.BrowserWindow;\r\n    \r\n    let mainWindow = null;\r\n    \r\n    app.on('ready',()=>{\r\n      mainWindow = new BrowserWindow({\r\n        width:800,\r\n        height:600,\r\n        webPreferences:{  //网页功能的设置\r\n        //创建BrowserWindow的时候指定nodeIntegration为false。 这样在electron内置浏览器里面不会有module和require全局变量。\r\n          nodeIntegration:true //是否集成node(使用node模块) -默认为false\r\n        }\r\n      })\r\n      mainWindow.loadFile('index.html');\r\n      mainWindow.on('closed',()=>{\r\n        mainWindow = null;\r\n      })\r\n    })\r\n    -=\r\n  * render/render.js文件内容\r\n    -= js\r\n    const fs = require('fs'); //引入node的fs模块 需要在渲染进程里面写东西\r\n\r\n    window.onload = function(){\r\n      let btn = document.querySelector('.btn1');\r\n      let container = document.querySelector('.container');\r\n      btn.addEventListener('click',()=>{\r\n         fs.readFile('data.txt',(err,data)=>{ //读取文件\r\n          if(err){\r\n            container.innerHTML = '读取文件失败'\r\n          }else{\r\n            container.innerHTML = data;\r\n          }\r\n        });\r\n      })\r\n    }\r\n    -=\r\n  * package.json文件内容\r\n    -= json\r\n    {\r\n      \"name\": \"study_2\",\r\n      \"version\": \"1.0.0\",\r\n      \"description\": \"\",\r\n      \"main\": \"index.js\",\r\n      \"scripts\": {\r\n        \"electron\":\"electron .\"\r\n      },\r\n      \"keywords\": [],\r\n      \"author\": \"\",\r\n      \"license\": \"ISC\",\r\n      \"devDependencies\": {\r\n        \"electron\": \"^8.0.0\"\r\n      }\r\n    }\r\n    -=\r\n  * 运行\r\n    -=\r\n    npm run electron\r\n    yarn electron\r\n    -=\r\n  * 运行结果\r\n  ![运行结果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGvUYnwEGxx05y5X*otz8ayU8l24FbpGkNcHamP9L41J1xQhO9NQ2ShZM8cp66zjirsoAA1hshUOBJixdI76h.HY!/r)\r\n\r\n\r\n\r\n## 5.Electron的remote模块\r\n> [remote](https://www.electronjs.org/docs/api/remote)在渲染进程中使用主进程模块,\r\nremote 模块为渲染进程（web页面）和主进程通信（IPC）提供了一种简单方法。例如：从渲染进程创建浏览器窗口\r\n* 借助=-remote=-Electron的API方法和模块也是分为可以在主进程和渲染进程中使用。\r\n\r\n### 从渲染进程创建浏览器窗口案例\r\n* 文件目录\r\n  -=\r\n  ├─index.html      --    渲染进程\r\n  ├─index.js        --    主进程\r\n  ├─index2.html     --    页面2\r\n  ├─package.json    --    package.json文件\r\n  ├─render      \r\n  |   └render.js    --    渲染进程逻辑\r\n  -=\r\n* =-index.html=-渲染进程文件内容\r\n  -= html\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>remote模块</title>\r\n  </head>\r\n  <body>\r\n    <button class=\"btn1\">点击出现新页面</button>\r\n    <script src=\"render/render.js\"></script>\r\n  </body>\r\n  </html>\r\n  -=\r\n* =-index.js=-主进程文件\r\n  -= js\r\n  const electron = require('electron');\r\n  const {app,BrowserWindow} = electron;\r\n  let mainWindow = null;\r\n  app.on('ready', () => {\r\n    mainWindow = new BrowserWindow({\r\n      width: 800,\r\n      height: 500,\r\n      webPreferences: {\r\n        //这里一定要写，不然在render.js里面无法使用js模块\r\n        nodeIntegration: true\r\n      }\r\n    });\r\n    mainWindow.loadFile('index.html');\r\n    mainWindow.on('closed', () => {\r\n      mainWindow = null;\r\n    })\r\n  });\r\n  -=\r\n* =-index2.html=-页面2文件内容\r\n  -= html\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>子页面</title>\r\n  </head>\r\n  <body style=\"background: #23da93;\">\r\n    <h1>我是新打开的页面</h1>\r\n  </body>\r\n  </html>\r\n  -=\r\n* =-render/render.js=-文件内容\r\n  -= js\r\n  let btn1 = document.querySelector('.btn1');\r\n  //在渲染进程中使用主进程模块需要使用remote\r\n  let { BrowserWindow } = require('electron').remote;\r\n  btn1.addEventListener('click',()=>{\r\n    const {BrowserWindow} = require('electron').remote;\r\n    let win = new BrowserWindow({\r\n      width:500,\r\n      height:500\r\n    });\r\n    win.loadFile('index2.html');\r\n    win.on('closed',()=>{\r\n      win = null;\r\n    })\r\n  })\r\n  -=\r\n* =-package.json=-文件内容\r\n  -= json\r\n  {\r\n    \"name\": \"study_3\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"\",\r\n    \"main\": \"index.js\",\r\n    \"scripts\": {\r\n      \"start\":\"electron .\"\r\n    },\r\n    \"keywords\": [],\r\n    \"author\": \"\",\r\n    \"license\": \"ISC\",\r\n    \"devDependencies\": {\r\n      \"electron\": \"^8.0.0\"\r\n    }\r\n  }\r\n  -=\r\n* 在命令行中执行\r\n  -=\r\n  npm run start \r\n  yarn start\r\n  -=\r\n* 运行结果\r\n  1. ![运行结果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGuBD6Ax0k6w847XnRhfbJZOQOv1W8D0VlUaI6Mys0cfXzb5D75RU.uFc5*HIml2zjKDCv8ES9*BdG3nytg2*u8I!/r)\r\n  2. ![点击按钮后的结果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGgQ*nJHHPyDcVLhOBc.3wczAlu52iDZ7A4izSuMrxfj7T4MlhcKEI3ofQL7ZshrFtjFTcMNQ7JAmWPlfNVPTXvU!/r)\r\n\r\n\r\n\r\n## 6.Electron创建菜单与基本使用\r\n> [Menu](https://www.electronjs.org/docs/api/menu)创建原生应用菜单和上下文菜单\r\n* 本篇使用到的方法\r\n  1. =-Menu.buildFromTemplate(template)=- - 创建菜单，返回Menu  template是菜单模板\r\n  2. =-Menu.setApplicationMenu(m)=- - 设置菜单  m是第一个方法的返回值\r\n### 设置菜单的案例\r\n* 文件路径：\r\n  -=\r\n  ├─index.html  -- 主页面(渲染进程)\r\n  ├─index.js  -- 主进程\r\n  ├─package.json  -- 配置文件\r\n  ├─setting.html  -- 页面2\r\n  ├─main\r\n  |  └menu.js  -- 主进程菜单逻辑代码\r\n  -=\r\n* =-index.html=-文件代码：\r\n  -= html\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>菜单</title>\r\n  </head>\r\n  <body>\r\n    <h2>菜单测试页面</h2>\r\n  </body>\r\n  </html>\r\n  -=\r\n* =-index.js=-渲染进程文件\r\n  -= js\r\n  const {app,BrowserWindow} = require('electron');\r\n  let mainWindow = null;\r\n  app.on(\"ready\",()=>{\r\n    mainWindow = new BrowserWindow({\r\n      width:800,\r\n      height:500,\r\n      webPreferences:{\r\n        nodeIntegration:true\r\n      }\r\n    })\r\n    require('./main/menu.js'); //引入设置菜单\r\n    mainWindow.loadFile('index.html');\r\n    mainWindow.webContents.openDevTools(); //打开调试工具\r\n    mainWindow.on('closed',()=>{\r\n      mainWindow = null;\r\n    })\r\n  });\r\n  -=\r\n* =-main/menu.js=-菜单逻辑代码(属于主进程)\r\n  -= js\r\n  const { Menu, BrowserWindow } = require('electron');\r\n  var template = [\r\n    {\r\n      label:'菜单1',\r\n      submenu:[\r\n        { label:\"菜单1-1\" },\r\n        { \r\n          label:\"菜单1-2\",\r\n          accelerator:'ctrl+f' //快捷键\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      label:'菜单2',\r\n      submenu:[\r\n        { label:'菜单2-1' },\r\n        { label:'菜单2-2' }\r\n      ]\r\n    },\r\n    {\r\n      label:'设置',\r\n      accelerator:'ctrl+n',\r\n      click:()=>{\r\n        let win = new BrowserWindow({\r\n          width:500,\r\n          height:500,\r\n          webPreferences:{\r\n            nodeIntegration:true\r\n          }\r\n        });\r\n        win.loadFile('setting.html'); //引入设置界面\r\n        win.on('closed',()=>{\r\n          win = null;\r\n        })\r\n      }\r\n    }\r\n  ];\r\n  //生成菜单\r\n  var m = Menu.buildFromTemplate(template);\r\n  //设置菜单\r\n  Menu.setApplicationMenu(m);\r\n  -=\r\n* =-setting.html=-页面2代码\r\n  -= html\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>设置</title>\r\n  </head>\r\n  <body style=\"background: #ccc;\">\r\n    <h2>我是设置页面</h2>\r\n  </body>\r\n  </html>\r\n  -=\r\n* =-package.json=-文件代码\r\n  -= json\r\n  {\r\n    \"name\": \"study_4\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"\",\r\n    \"main\": \"index.js\",\r\n    \"scripts\": {\r\n      \"start\":\"electron .\"\r\n    },\r\n    \"keywords\": [],\r\n    \"author\": \"\",\r\n    \"license\": \"ISC\",\r\n    \"devDependencies\": {\r\n      \"electron\": \"^8.0.0\"\r\n    }\r\n  }\r\n  -=\r\n* 运行\r\n  -=\r\n  npm run start\r\n  yarn start\r\n  -=\r\n* 运行结果\r\n  ![运行结果图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGsJ.x4SmcqHCLZGbW17PpzwUPnRV00os4iVJTMAC7lxQdQVcEMF5ISaREg7joqIBVGIYOGI.n.l97Hcb7Pf2Nlc!/r)\r\n* 点击设置菜单或者按下=-ctrl+n=-效果图\r\n  ![点击设置菜单效果图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGj6GO8e6js1T8KGprarb*2RZ8Qeh90o.GAOjCQA4lfxfbTFE7BPtxaDrOmiqrl3RMssvH30Y3gETt6L7x3xOm9c!/r)\r\n* 二级菜单效果图\r\n  ![二级菜单效果图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGu9jqiheisda4ER3.7JBgVXP3mBqi2fQCD9knyGj0T8DXwF682M9yjEjeWYIVS3oloSAlPXgC8GasE2XXq9e*wU!/r)\r\n\r\n\r\n\r\n## 7.Electron右键菜单\r\n* 右键菜单的相应事件是写在渲染进程中的，也就是在=-index.html=-中的，所以要是有=-remote=-模块进行操作\r\n> 创建右键菜单依旧使用[Menu](https://www.electronjs.org/docs/api/menu)模块，菜单绑定事件方式也与上一篇相同\r\n* 本片使用到的方法\r\n  1. =-Menu.buildFromTemplate(template)=- -- 返回Menu对象  template - 菜单模板\r\n  2. =-MenuObj.popup({})=- -- 将此菜单作为 browserWindow 中的上下文菜单弹出。 MenuObj是1返回的内容\r\n  3. =-getCurrentWindow()=- -- 返回 BrowserWindow - 此网页所属的窗口\r\n\r\n* 案例文件路径\r\n  -=\r\n  ├─index.html -- 渲染进程文件\r\n  ├─index.js   -- 主进程文件\r\n  ├─package.json  -- 配置文件\r\n  ├─render\r\n  |   └render.js -- 渲染进程逻辑文件\r\n  -=\r\n* =-index.html=-文件内容\r\n  -= html\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>右键菜单</title>\r\n  </head>\r\n  <body>\r\n    <h2>右键菜单设置</h2>\r\n    <script src=\"./render/render.js\"></script>\r\n  </body>\r\n  </html>\r\n  -=\r\n* =-index.js=-文件内容\r\n  -= js\r\n  const {app, BrowserWindow} = require('electron');\r\n  let win = null;\r\n  app.on('ready',()=>{\r\n    win = new BrowserWindow({\r\n      width:800,\r\n      height:500,\r\n      webPreferences:{\r\n        nodeIntegration:true\r\n      }\r\n    });\r\n\r\n    win.loadFile('index.html');\r\n    win.on('closed',()=>{\r\n      win = null;\r\n    })\r\n  })\r\n  -=\r\n* =-render/render.js=-文件内容\r\n  -= js\r\n  const {Menu,getCurrentWindow} = require('electron').remote;\r\n  const rightTemplate = [\r\n    {\r\n      label:'复制',\r\n      accelerator:'ctrl+c'\r\n    },\r\n    {\r\n      label:'粘贴',\r\n      accelerator:'ctrl+v'\r\n    }\r\n  ]\r\n  //生成菜单\r\n  let m = Menu.buildFromTemplate(rightTemplate);\r\n\r\n  window.addEventListener('contextmenu',e =>{\r\n    e.preventDefault(); //阻止默认事件\r\n    m.popup({ //设置菜单\r\n      window:getCurrentWindow(), //返回BrowserWindow\r\n    })\r\n  })\r\n  -=\r\n* =-package.json=-文件内容\r\n  -= json\r\n  {\r\n    \"name\": \"study_5\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"\",\r\n    \"main\": \"index.js\",\r\n    \"scripts\": {\r\n      \"start\": \"electron .\"\r\n    },\r\n    \"keywords\": [],\r\n    \"author\": \"\",\r\n    \"license\": \"ISC\",\r\n    \"devDependencies\": {\r\n      \"electron\": \"^8.0.1\"\r\n    }\r\n  }\r\n  -=\r\n* 执行\r\n  -=\r\n  npm run start\r\n  yarn start\r\n  -=\r\n* 执行结果(右键)\r\n\r\n  ![运行效果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGsR*NTXt4HRQxcp9BE6a7Tk2b5TM00ezUq0qiov.Gajz4Uo4xDsyK0g7QJrjPwqS9m*BlYuMzlPbSUFWGNHlDy4!/r)\r\n  \r\n  \r\n  \r\n## 8.通过浏览器打开链接 - shell模块\r\n> [shell](https://www.electronjs.org/docs/api/shell)模块可以既在渲染进程(==在渲染进程中不需要=-remote=-模块==)也可以主进程中使用\r\n* 本片使用到的方法\r\n  1. =-shell.openExternal(url)=- -- 在用户默认浏览器中打开url\r\n\r\n### 使用案例\r\n* 文件路径\r\n  -=\r\n  ├─index.html -- 渲染进程\r\n  ├─index.js   -- 主进程\r\n  ├─package.json -- 配置文件\r\n  ├─render\r\n  |   └render.js  -- 渲染进程逻辑\r\n  -=\r\n* =-index.html=-文件内容\r\n  -= html\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>通过浏览器打开链接</title>\r\n  </head>\r\n  <body>\r\n    <h1>\r\n      <!-- 直接点击会在electron应用内打开 -->\r\n      <a href=\"http://www.baidu.com\">点击应用内打开百度</a>\r\n    </h1>\r\n    <hr>\r\n    <h1>\r\n      <a class=\"a1\" href=\"http://www.baidu.com\">点击在浏览器中打开百度</a>\r\n    </h1>\r\n    <script src=\"render/render.js\"></script>\r\n  </body>\r\n  </html>\r\n  -=\r\n* =-index.js=-文件内容\r\n  -= js\r\n  const {app, BrowserWindow} = require('electron');\r\n  let mainWin = null;\r\n\r\n  app.on('ready',()=>{\r\n    mainWin = new BrowserWindow({\r\n      width:800,\r\n      height:500,\r\n      webPreferences:{\r\n        nodeIntegration:true\r\n      }\r\n    });\r\n    mainWin.loadFile('index.html');\r\n    //打开开发者工具\r\n    mainWin.webContents.openDevTools();\r\n    mainWin.on('closed',()=>{\r\n      mainWin = null;\r\n    })\r\n\r\n  });\r\n  -=\r\n* =-render.js=-文件内容\r\n  -= js\r\n  const {shell} = require('electron');\r\n  let a1 = document.querySelector('.a1');\r\n  a1.addEventListener('click',(e)=>{\r\n    e.preventDefault();\r\n    let {href} = a1;\r\n    //在浏览器打开链接\r\n    //https://www.electronjs.org/docs/api/shell#shellbeep\r\n    shell.openExternal(href);\r\n    \r\n  })\r\n  -=\r\n* =-package.json=-文件内容\r\n  -= json\r\n  {\r\n    \"name\": \"study_6\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"\",\r\n    \"main\": \"index.js\",\r\n    \"scripts\": {\r\n      \"start\": \"electron .\"\r\n    },\r\n    \"keywords\": [],\r\n    \"author\": \"\",\r\n    \"license\": \"ISC\",\r\n    \"devDependencies\": {\r\n      \"electron\": \"^8.0.1\"\r\n    }\r\n  }\r\n\r\n  -=\r\n* 执行=-npm run start=-或者=-yarn start=-即可\r\n\r\n\r\n## 9.Electron嵌入网页和打开子窗口\r\n1. 嵌入网页\r\n    > [BrowserView](https://www.electronjs.org/docs/api/browser-view)可以实现类似于Web中=-<iframe>=-标签的效果(内嵌网页)，==BrowserView是主进程中的类，只能在主进程使用==\r\n    \r\n    * 示例代码 =-index.js=-主进程代码如下\r\n      -= js\r\n      const {app, BrowserWindow, BrowserView} = require('electron');\r\n      app.on('ready',()=>{\r\n        let mainWin = new BrowserWindow({\r\n          width:1000,\r\n          height:800,\r\n          webPreferences:{\r\n            nodeIntegration:true\r\n          }\r\n        });\r\n        mainWin.loadFile('index.html');\r\n        mainWin.on('closed',()=>{\r\n          mainWin = null;\r\n        })\r\n        \r\n        //嵌入页面代码\r\n        //https://www.electronjs.org/docs/api/browser-view\r\n        let view = new BrowserView(); //new出对象\r\n        mainWin.setBrowserView(view); //在主窗口中设置view可用\r\n        view.setBounds({\r\n          x:0, //距离x轴的距离\r\n          y:100,//距离y轴的距离\r\n          width:1000, //宽度\r\n          height:700 //高度\r\n        })\r\n        //view载入页面\r\n        view.webContents.loadURL('https://uniapp.dcloud.io/');\r\n      });\r\n      -=\r\n    * 其他代码无变化\r\n    * 运行效果\r\n      ![BrowserView内嵌网页运行图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGnDc69jBTi9ZS*QYVZF7SB3.inLiVrBF5Oag79USWWYFWy6CkY8SROSmj382MyJj4WiEA3G8GzkXfWINfXsK.XE!/r)\r\n\r\n2. 打开子窗口\r\n* 打开子页面使用=-window.open(url)=-方法\r\n* 只有=-window.open()=-打开的页面才算是子页面，之前使用=-BrowserWindow=-打开的页面不算子页面\r\n* 示例代码如下\r\n  * =-index.html=-渲染进程\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>内嵌网页</title>\r\n    </head>\r\n    <body>\r\n      <button class=\"btn1\">点击打开子窗口</button>\r\n      <script src=\"render/render.js\"></script>\r\n    </body>\r\n    </html>\r\n    -=\r\n  *=-render/render.js=-渲染进程逻辑文件\r\n    -= js\r\n    let btn1 = document.querySelector('.btn1');\r\n    btn1.addEventListener('click',()=>{\r\n      //window可以直接使用，不需要引入\r\n      window.open('http://www.baidu.com')\r\n    })\r\n    -=\r\n  * 剩下的代码无变化\r\n  * 运行效果\r\n    ![window.open运行图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGkYdgmx6CQ7qd75k93Ci*lsQvz1WUBCuo0gdwzJLRhcPKu1SzIXc4ATA.vU4JphrED496GdwhR8IDO99oM5ICaI!/r)\r\n    \r\n    \r\n    \r\n## 10.Electron父子窗口的通信\r\n> 子窗口向父窗口发送数据使用[window.opener.postMessage()](https://www.electronjs.org/docs/api/window-open#windowopenerpostmessagemessage-targetorigin)\r\n\r\n> 父窗口监听子窗口是数据监听=-message=-事件，例如使用=-window.addEventListener('message',fn)=-\r\n\r\n##### 代码案例\r\n* 文件路径\r\n    -=\r\n    ├─child.html -- 子窗口\r\n    ├─index.html -- 主窗口\r\n    ├─index.js  -- 主进程\r\n    ├─package.json -- 配置文件\r\n    ├─render\r\n    |   └render.js  -- 主进逻辑文件\r\n    -=\r\n* =-index.html=-文件代码\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>主页面</title>\r\n    </head>\r\n    <body>\r\n      <h2>主页面</h2>\r\n      <button id=\"btn1\">点击打开子窗口</button>\r\n      <div class=\"container\"></div>\r\n      <script src=\"./render/render.js\"></script>\r\n    </body>\r\n    </html>\r\n    -=\r\n* =-index.js=-文件代码\r\n    -= js\r\n    const {app,BrowserWindow} = require('electron');\r\n    app.on('ready',()=>{\r\n      let win = new BrowserWindow({\r\n        width:800,\r\n        height:500\r\n      });\r\n      win.loadFile('index.html');\r\n      win.on('closed',()=>{\r\n        win = null;\r\n      })\r\n    })\r\n    -=\r\n* =-render.js=-文件代码\r\n    -= js\r\n    let btn = document.querySelector('#btn1');\r\n    btn.addEventListener('click',()=>{\r\n      //打开子窗口\r\n      window.open('./child.html')\r\n    })\r\n    //监听子窗口通信\r\n    window.addEventListener('message',msg=>{\r\n      //msg是一个对象  msg.data是传值的内容\r\n      let container = document.querySelector('.container');\r\n      container.innerHTML = msg.data;\r\n    })\r\n    -=\r\n* =-child.html=-文件代码\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>子页面</title>\r\n    </head>\r\n    <body>\r\n      内容：<input class=\"inp1\" type=\"text\" value=\"\" placeholder=\"请输入通信内容\">\r\n      <button class=\"btn1\">点击向父页面传值</button>\r\n      <script>\r\n      let btn1 = document.querySelector('.btn1');\r\n      btn1.addEventListener('click',e=>{\r\n        let {value} = document.querySelector('.inp1');\r\n        //发起通信\r\n        window.opener.postMessage(value);\r\n      })\r\n      </script>\r\n    </body>\r\n    </html>\r\n    -=\r\n* =-package.json=-部分文件代码\r\n    -= json\r\n    \"scripts\": {\r\n        \"start\":\"electron .\"\r\n    },\r\n    -=\r\n* 运行=-npm run start=-或者=-yarn start=-\r\n* 运行结果\r\n    ![父窗口运行结果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGpf0sdLBJu1Gm0QUS9UomEsmuByfNFwzGLWnWlL5G72jvhQlfMO7M8oVw3d0ndR*lwubCaBkq0V7hHil6JKNH0M!/r)\r\n\r\n    ![子窗口运行结果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGtaTJkYZiEhgLcI8zju8Z*hv9c95Cp404UlxbI1GN044iaPmxBMQxAlLPpfK6GgGQmgPLJFrR9gBjtEEGTuFkwI!/r)\r\n    \r\n    \r\n    \r\n## 11.Electron选择文件对话框\r\n> 打开对话框使用[dialog.showOpenDialog()](https://www.electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options)\r\n* =-dialog.showOpenDialog({})=-参数\r\n    * =-title=-：String（可选），对话框的标题\r\n    * =-defaultPath=-：String（可选），默认打开的路径\r\n    * =-buttonLabel=-：String（可选），确定按钮自定义内容 默认为 打开\r\n    * =-filters=-：Array（可选），文件选择过滤器，可以对文件后缀名进行筛选\r\n    * =-properties=-：String（可选），打开文件的属性，比如打开文件还是打开文件夹，甚至是隐藏文件。\r\n##### demo练习\r\n* 文件目录\r\n    -=\r\n    ├─index.html  -- 渲染进程\r\n    ├─index.js -- 主进程\r\n    ├─package.json -- 配置文件\r\n    ├─render\r\n    |   └render.js -- 渲染进程逻辑文件\r\n    -=\r\n* =-index.html=-文件内容\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>文件选择</title>\r\n    </head>\r\n    <body>\r\n      <button class=\"openBtn\">点击选择图片</button>\r\n      <img src=\"\" style=\"width:100%\" class=\"img1\">\r\n      <!-- 引入逻辑代码 -->\r\n      <script src=\"./render/render.js\"></script>\r\n    </body>\r\n    </html>\r\n    -=\r\n* =-index.js=-文件内容\r\n    -= js\r\n    const {app, BrowserWindow} = require('electron');\r\n    app.on('ready',()=>{\r\n      let win = new BrowserWindow({\r\n        width:1000,\r\n        height:800,\r\n        webPreferences:{\r\n          nodeIntegration:true\r\n        }\r\n      });\r\n      win.loadFile('index.html');\r\n      win.on('closed',()=>{\r\n        win = null;\r\n      });\r\n    })\r\n    -=\r\n* =-render.js=-文件内容\r\n    -= js\r\n    const { dialog } = require('electron').remote;\r\n    const openBtn = document.querySelector('.openBtn');\r\n    openBtn.addEventListener('click',e=>{\r\n      // https://www.electronjs.org/docs/api/dialog\r\n      dialog.showOpenDialog({\r\n        title:'请选择要打开的图片', //标题\r\n        // defaultPath:'', //打开是默认路径\r\n        buttonLabel:'确定选择', //确定按钮自定义内容 -默认为 打开\r\n        filters:[\r\n          {\r\n            name:'img',extensions:['jpg','png','jpeg','gif']\r\n          }\r\n        ]\r\n      }).then(res=>{\r\n        console.log(res);\r\n        if(res.canceled){\r\n          //点击取消\r\n          return;\r\n        }\r\n        const img1 = document.querySelector('.img1');\r\n        img1.src = res.filePaths[0];\r\n      }).catch(err=>{\r\n        console.log('选择错误->',err);\r\n      })\r\n    })\r\n    -=\r\n* =-package.json=-文件\r\n    -= json\r\n    \"scripts\": {\r\n        \"start\": \"electron .\"\r\n      },\r\n    -=\r\n* 执行=-yarn start=-\r\n* 执行结果\r\n    ![打开效果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGmmbs2x3wrKhH5jjfCCXxMgjYVPfq6i38kO8J9TBhqMLHySV6Omc5eRBtsR3SexTF1oeRrRG08pWXNJ9GM4dYCo!/r)\r\n* 点击按钮效果\r\n    ![对话框效果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGjXe.eD6nVDfvOkxW9DLiteiDfl1byGSMYswSKMPP4H8nnqMwGhwR5GvcF0fuaEbsG3cC0yLr1DI*pGREYM0.Lc!/r)\r\n* 选择文件之后效果\r\n    ![选择文件完成效果图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGvOsdWjthHr.LF1zHDb6TXIYJfeK.9.0Y*XglN7j7rhgjWNF*6V.2WQkr0aCAd.OREiO.zAAh*wX.kaHjOdphxs!/r)\r\n\r\n\r\n\r\n## 12.Electron保存(创建)文件对话框\r\n> 打开对话框使用[dialog.showSaveDialog()](https://www.electronjs.org/docs/api/dialog#dialogshowsavedialogbrowserwindow-options)\r\n* =-dialog.showSaveDialog({})=-参数\r\n    * =-title=-：String（可选），对话框的标题\r\n    * =-defaultPath=-：String（可选），默认打开的路径\r\n    * =-buttonLabel=-：String（可选），确定按钮自定义内容 默认为 保存\r\n    * =-filters=-：Array（可选），文件选择过滤器，可以对文件后缀名进行筛选\r\n    * =-properties=-：String（可选），打开文件的属性，比如打开文件还是打开文件夹，甚至是隐藏文件。\r\n    * \r\n##### demo练习\r\n* 文件目录\r\n    -=\r\n    ├─index.html -- 渲染进程\r\n    ├─index.js  -- 主进程\r\n    └package.json\r\n    -=\r\n* =-index.html=-文件内容\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>保存文件对话框</title>\r\n    </head>\r\n    <body>\r\n      <button class=\"saveBtn\">保存文件</button>\r\n      <script>\r\n        const { dialog } = require('electron').remote\r\n        const fs = require('fs');\r\n        let saveBtn = document.querySelector('.saveBtn');\r\n        saveBtn.addEventListener('click',e=>{\r\n          //保存文件\r\n          dialog.showSaveDialog({\r\n            title:'保存文件'\r\n          }).then(res=>{\r\n            if(res.canceled){\r\n              console.log('用户点击取消');\r\n              return;\r\n            }\r\n            //写入内容\r\n            fs.writeFileSync(res.filePath,'文件内容内容内容内容内容内容');\r\n            console.log('保存成功->',res);\r\n          }).catch(err=>{\r\n            console.log('保存失败->',err);\r\n          })\r\n        })\r\n      </script>\r\n    </body>\r\n    </html>\r\n    -=\r\n* =-index.js=-文件内容\r\n    -= js\r\n    const {app,BrowserWindow} = require('electron');\r\n    app.on('ready',()=>{\r\n      let win = new BrowserWindow({\r\n        width:800,\r\n        height:500,\r\n        webPreferences:{\r\n          nodeIntegration:true\r\n        }\r\n      });\r\n      win.loadFile('index.html');\r\n      win.on('closed',()=>{\r\n        win = null;\r\n      })\r\n    })\r\n    -=\r\n* =-package.json=-的=-scripts=-部分代码\r\n    -= json\r\n    \"scripts\": {\r\n      \"start\": \"electron .\"\r\n    },\r\n    -=\r\n* 运行=-yarn start=-\r\n* 运行结果\r\n    ![运行效果](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGsSQpEv.xbL04k27I5EU1TdiR0KFifCp7668Ctm6zQQ3drU57D9bNHuic5l4HObb6hts3vdFENGaUVXHPqlbois!/r)\r\n* 点击按钮弹出对话框效果\r\n    ![弹出对话框效果图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGn1.NdduUBl3EPdb0Dhvdqk.JKKbRi0O81xYfD1vii*ahOVWV4nAOk*5KbqErjbxgWv8iyLn6RtuYh*71IQAFCo!/r)\r\n* 打开文件效果图\r\n    ![打开文件效果图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGvVqjz9gVFY4o2pRzXn8yRCe**7ICbpv7c8svDSPzmXQGnaISRP8puWLEUeTZIBkZsMIW8c7rzcGCA9l7FIz.20!/r)\r\n    \r\n    \r\n\r\n## 13.Electron消息对话框\r\n> 消息对话框使用[dialog.showMessageBox()](https://www.electronjs.org/docs/api/dialog#dialogshowmessageboxbrowserwindow-options)\r\n* =-dialog.showMessageBox()=-参数说明\r\n    * =-type=-：String类型，可选，可以为=-none=-,=-info=-,=-error=-,=-question=-或者=-warning=-.在Windows平台上=-question=-和=-info=-图标相同,在macOS上=-warning=-和=-error=-会显示相同图标\r\n    * =-title=-：String类型，可选。MessageBox的标题，_一些平台不显示_\r\n    * =-message=-：String类型，MessageBox的内容\r\n    * =-detail=-：String类型，可选。MessageBox的额外信息\r\n    * =-buttons=-：Array类型，按钮的文本数组，在windows上，空数组会显示“OK”，返回的是被点击按钮的索引\r\n    * =-defaultId=-：Number(整型)，可选，默认选中的按钮，值为=-buttons=-数组中的索引\r\n    * 更多不常用参数：[点击查看文档](https://www.electronjs.org/docs/api/dialog#dialogshowmessageboxbrowserwindow-options)\r\n##### 演示demo\r\n* 文件路径\r\n    -=\r\n    ├─index.html -- 渲染进程\r\n    ├─index.js  -- 主进程\r\n    └package.json\r\n    -=\r\n* =-index.html=-文件内容\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>消息对话框</title>\r\n    </head>\r\n    <body>\r\n      <div class=\"radioDiv\">\r\n        <h2>图标样式</h2>\r\n        <span><input type=\"radio\" name=\"icon-type\" value=\"none\" checked> 无 </span>\r\n        <span><input type=\"radio\" name=\"icon-type\" value=\"info\"> 信息 </span>\r\n        <span><input type=\"radio\" name=\"icon-type\" value=\"error\"> 错误 </span>\r\n        <span><input type=\"radio\" name=\"icon-type\" value=\"warning\"> 警告 </span>\r\n        <span><input type=\"radio\" name=\"icon-type\" value=\"question\"> 疑问 </span>\r\n      </div>\r\n      <button class=\"messageBtn\">点击弹出消息对话框</button>\r\n      <script>\r\n        const {dialog} = require('electron').remote; \r\n        const messageBtn = document.querySelector('.messageBtn');\r\n        messageBtn.addEventListener('click',()=>{\r\n          let radio = document.querySelector('input[name=icon-type]:checked');\r\n          let {value} =radio;\r\n          dialog.showMessageBox({\r\n            type:value,\r\n            title:value+'类型',\r\n            defaultId:1,\r\n            message:'提示内容内容内容内容内容',\r\n            detail:'额外信息信息信息信息信息信息',\r\n            buttons:['按钮1','按钮2','按钮3']\r\n          }).then(res=>{\r\n            console.log('res->',res);\r\n            let {response} = res;\r\n            window.alert(=-按钮$-response+1}被点击=-);\r\n          }).catch(err=>{\r\n            console.log('错误->',err);\r\n          })\r\n        })\r\n      </script>\r\n    </body>\r\n    </html>\r\n    -=\r\n* =-index.js=-文件内容\r\n    -= js\r\n    const {app,BrowserWindow} = require('electron');\r\n    app.on('ready',()=>{\r\n      let win = new BrowserWindow({\r\n        width:800,\r\n        height:500,\r\n        webPreferences:{\r\n          nodeIntegration:true\r\n        }\r\n      });\r\n      win.loadFile('index.html');\r\n      win.on('closed',()=>{\r\n        win = null;\r\n      })\r\n    })\r\n    -=\r\n* =-package.json=-的=-scripts=-内容\r\n    -= json\r\n    \"scripts\": {\r\n      \"start\": \"electron .\"\r\n    },\r\n    -=\r\n* 效果图\r\n ![运行效果图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGgWSXcaWEk2s1iPcVNt.RkPMo3pPdSC9ML9V5KOVtDihKnQ9JyHRuZ0tw5Bbj.nnERpIZKprLh2pwK4wYUSkP0U!/r)\r\n ![弹窗效果图](http://r.photo.store.qq.com/psc?/V1021XMO1TUVn3/tS3tY63exiZNUWwJevnZGomvpUhqesn6tTnlRl02xSJhMsVmDZ9WiITyr4aPXFGyMrhIiV3E9G5**KEAI9pA2rICawG2MGqWWkhhN8B2Nos!/r)\r\n \r\n \r\n \r\n## 14.Electron监听网络连接\r\n### electon客户端监听网络连接判断网络状态，可以使用=-window.addEventListener()=-来进行事件监听\r\n> #### 相关事件\r\n* online：连接上网络就会触发该事件 (如果连接着网络打开应用不会触发)\r\n* offline：网络断开会触发该事件\r\n* ####  用法 - 直接在渲染进程中写入以下代码：\r\n    -= js\r\n    window.addEventListener('online',function(){\r\n        //监听网络连接\r\n        alert('官人，我来了，我们继续哦！')\r\n    })\r\n    window.addEventListener('offline',function(){\r\n        // 监听网络断开\r\n        alert('小女子先行离开一会，请稍等！')\r\n    })\r\n    -=\r\n### electron的底部消息通知是通过=-H5=-的 [window.Natification](https://developer.mozilla.org/zh-CN/docs/Web/API/notification) 来实现的\r\n> ### window.Notification(title,option)的参数属性\r\n* title：通知的标题\r\n* option：消息的各种配置(可选)\r\n    * dir：文字的方向；auto-自动 ltr-从左到右 rtl-从右到左\r\n    * lang: 指定通知中所使用的语言。这个字符串必须在 BCP 47 language tag 文档中是有效的。\r\n    * body - 通知中额外显示的字符串（内容）\r\n    * tag: 赋予通知一个ID，以便在必要的时候对通知进行刷新、替换或移除。\r\n    * icon: 一个图片的URL，将被用于显示通知的图标。\r\n\r\n#### 用法 (渲染进程中使用)\r\n  -= html\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>底部消息通知</title>\r\n  </head>\r\n  <body>\r\n    <button class=\"btn1\">点击通知</button>\r\n    <script>\r\n    let btn1 = document.querySelector('.btn1');\r\n    let option = {\r\n      title:'我是提示',\r\n      body:'我是提示额外内容.....'\r\n    }\r\n\r\n    btn1.addEventListener('click',()=>{\r\n      new window.Notification('我是提示',{\r\n        body:'我是提示额外显示的内容'\r\n      })\r\n    })\r\n    </script>\r\n  </body>\r\n  </html>\r\n  -=\r\n    \r\n    \r\n \r\n## 15.Electron注册全局快捷键\r\n> #### 注册全局快捷键需要用到[globalShortcut](https://www.electronjs.org/docs/api/global-shortcut)模块，=-globalShortcut=-是主进程中的模块(在渲染进程中需要使用=-remote=-)\r\n##### 本文使用到的方法\r\n* =-globalShortcut.register('快捷键',fn())=- --- 注册快捷键\r\n* =-globalShortcut.isRegistered('快捷键')=-  --- 检测快捷键是否注册成功 返回true/false\r\n* =-globalShortcut.unregister('快捷键')=-    --- 注销某个快捷键\r\n* =-globalShortcut.unregisterAll()=-         --- 注销所有快捷键\r\n\r\n##### 代码示例\r\n* =-index.html=- -- 渲染进程\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>全局快捷键</title>\r\n    </head>\r\n    <body>\r\n      <h2>ctrl+o加载网页，ctrl+m显示底部通知栏</h2>\r\n      <button class=\"register-btn-m\">注销 ctrl+m 快捷键</button>\r\n      <button class=\"register-btn-all\">注销全部快捷键</button>\r\n      <script>\r\n        const { globalShortcut} = require('electron').remote;\r\n        globalShortcut.register('ctrl+m',()=>{\r\n          new window.Notification('快捷键被点击',{\r\n            body:'ctrl+m被点击'\r\n          })\r\n        })\r\n        let isMRegister = globalShortcut.isRegistered('ctrl+m');\r\n        if(!isMRegister){\r\n          //注册失败(快捷键冲突处理)\r\n          window.alert('注册ctrl+m失败');\r\n        };\r\n        //解绑快捷键\r\n        let btn = document.querySelector('.register-btn-m');\r\n        let btnAll = document.querySelector('.register-btn-all');\r\n        btn.addEventListener('click',e=>{\r\n          globalShortcut.unregister('ctrl+m');\r\n          window.alert('清空快捷键成功')\r\n        })\r\n        btnAll.addEventListener('click',e=>{\r\n          globalShortcut.unregisterAll();\r\n          window.alert('清空快捷键成功')\r\n        })\r\n      </script>\r\n    </body>\r\n    </html>\r\n    -=\r\n* =-index.js=- -- 主进程\r\n    -= js\r\n    const {app, BrowserWindow, globalShortcut} = require('electron');\r\n\r\n    app.on('ready',()=>{\r\n      let win = new BrowserWindow({\r\n        width:800,\r\n        height:500,\r\n        webPreferences:{\r\n          nodeIntegration:true\r\n        }\r\n      });\r\n      //注册快捷键\r\n      globalShortcut.register('ctrl+o',()=>{\r\n        win.loadURL('http://www.huya.com');\r\n      })\r\n      //检测快捷键是否注册成功 -- 返回true/false\r\n      let isORegister = globalShortcut.isRegistered('ctrl+o');\r\n      if(!isORegister){\r\n        //注册失败(快捷键冲突处理)\r\n        window.alert('注册ctrl+o失败');\r\n      };\r\n      \r\n      win.loadFile('index.html');\r\n      win.on('closed',()=>{\r\n        win = null;\r\n      })\r\n    })\r\n    // Electron 会首先关闭所有的窗口然后触发 will-quit 事件\r\n    app.on('will-quit',()=>{ //关闭时注销所有全局快捷键\r\n      //注销所有的全局快捷键\r\n      globalShortcut.unregisterAll();\r\n    })\r\n    -=\r\n\r\n\r\n\r\n## 16.Electron剪切板的使用(clipboard)\r\n> ### 需要使用到 [clipboard](https://www.electronjs.org/docs/api/clipboard)\r\n#### 点击按钮复制激活码案例：\r\n* index.html\r\n    -= html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n      <title>Document</title>\r\n    </head>\r\n    <body>\r\n      <p class=\"text\"我是文本内容</p>\r\n      <button class=\"btn\">点击复制</button>\r\n      <script>\r\n        let { clipboard } = require('electron');\r\n        let text = document.querySelector('.text');\r\n        let btn = document.querySelector('.btn');\r\n        btn.addEventListener('click',e=>{\r\n          clipboard.writeText(text.innerHTML);\r\n        })\r\n      </script>\r\n    </body>\r\n    </html>\r\n    -=\r\n* index.js\r\n    -= js\r\n    const {app,BrowserWindow} = require('electron');\r\n    app.on('ready',()=>{\r\n      let win = new BrowserWindow({\r\n        width:800,\r\n        height:500,\r\n        webPreferences:{\r\n          nodeIntegration:true\r\n        }\r\n      })\r\n      win.loadFile('index.html');\r\n      win.on('closed',()=>{\r\n        win = null\r\n      })\r\n    })\r\n    -=\r\n    \r\n    \r\n    \r\n## 17.electron应用打包\r\n#### 1. 定位到项目根目录\r\n#### 2. 使用=-npm=-或者=-yarn=-安装=-electron-packager=-\r\n-=\r\n//npm\r\nnpm install electron-packager --save-dev\r\ncnpm install electron-packager --save-dev\r\n//yarn\r\nyarn add electron-packager --dev\r\n-=\r\n#### 打包方法1(不推荐)\r\n* 第一种打包方法就是直接在命令行中输入electron-packager,然后后边跟着6个打包参数\r\n\r\n-=\r\n\r\nelectron-packager <location of project> <name of project> <platform> <architecture> <electron version> <optional options>\r\n\r\n//参数说明\r\nlocation of project : 项目所在路径\r\nname of project : 打包的项目名称\r\nplatform : 确定了你要构建哪个平台的应用（Windows、Mac还是Liux）\r\narchitecture: 决定了使用x86还是x64还是两个架构都需要\r\nelectron version: electron 的版本\r\noptional options: 其他可选选项\r\n-=\r\n#### 打包方法2\r\n* 打开=-package.json=-文件，在=-scripts=-下添加代码\r\n\r\n-=\r\nelectron-packager ./ HelloWorld --all --out ./outApp --arch=x64 --electron-version 8.2.3  --overwrite --icon=./app/logo72.png\r\n\r\n//说明\r\nelectron-packager ./ 软件名称 --all(平台) --out ./outApp(输出路径) --arch=x64 --electron-version 8.2.3(electron版本)  --overwrite --icon=./app/logo72.icon(图标)\r\n-=\r\n* 在项目中新建=-outApp=-文件夹\r\n* 使用=-npm run-scripts packager=-\r\n\r\n\r\n`","import electronNote from './detail/electron_note';\r\nexport const details = [\r\n  electronNote,\r\n  ''\r\n] ","<template>\r\n  <div class=\"container\">\r\n    <div class=\"markdown-view\">\r\n      <mavon-editor\r\n        :value=\"mdText\"\r\n        :editable=\"false\"\r\n        :toolbarsFlag=\"false\"\r\n        :subfield=\"false\"\r\n        defaultOpen=\"preview\"\r\n        :navigation=\"true\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { details } from \"../../../public/config/detail\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      detailId: 0,\r\n      mdText: '',\r\n    };\r\n  },\r\n  beforeMount() {\r\n    this.detailId = this.$route.params.id;\r\n    /**\r\n     *   -=   --->  ```\r\n     *   =-   --->  `\r\n     *   $-   --->  ${\r\n     */\r\n    let mdText = details[this.detailId].replaceAll('-=', '```');\r\n    mdText = mdText.replaceAll('=-', '`');\r\n    mdText = mdText.replaceAll('$-', '${');\r\n    this.mdText = mdText;\r\n  },\r\n};\r\n</script>\r\n<style lang='less' scoped>\r\n.container{\r\n  background:white;\r\n  min-height:100vh;\r\n  .markdown-view{\r\n    margin:0 auto;\r\n    min-width: 1300px;\r\n    width:80%;\r\n  }\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Detail.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Detail.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Detail.vue?vue&type=template&id=7c6fa05d&scoped=true&\"\nimport script from \"./Detail.vue?vue&type=script&lang=js&\"\nexport * from \"./Detail.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Detail.vue?vue&type=style&index=0&id=7c6fa05d&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7c6fa05d\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}